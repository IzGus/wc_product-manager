"""
–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
"""
import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, ttk
from typing import List, Dict, Any, Optional
import threading
import logging

logger = logging.getLogger(__name__)

class AttributesManagerDialog:
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏"""
    
    def __init__(self, parent, wc_manager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            wc_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä WooCommerce
        """
        self.parent = parent
        self.wc_manager = wc_manager
        self.attributes = []
        self.selected_attribute = None
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        self.window = ctk.CTkToplevel(parent)
        self.window.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏")
        self.window.geometry("900x700")
        self.window.transient(parent)
        self.window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        self.setup_ui()
        self.load_attributes()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ"""
        self.window.update_idletasks()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–æ–Ω
        window_width = self.window.winfo_width()
        window_height = self.window.winfo_height()
        parent_x = self.parent.winfo_x()
        parent_y = self.parent.winfo_y()
        parent_width = self.parent.winfo_width()
        parent_height = self.parent.winfo_height()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        x = parent_x + (parent_width // 2) - (window_width // 2)
        y = parent_y + (parent_height // 2) - (window_height // 2)
        
        self.window.geometry(f"{window_width}x{window_height}+{x}+{y}")
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self.window)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(main_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤", 
                                 font=ctk.CTkFont(size=20, weight="bold"))
        title_label.pack(pady=(0, 20))
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –¥–≤—É–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏
        content_frame = ctk.CTkFrame(main_frame)
        content_frame.pack(fill="both", expand=True)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        left_frame = ctk.CTkFrame(content_frame)
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 5))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        right_frame = ctk.CTkFrame(content_frame)
        right_frame.pack(side="right", fill="both", expand=True, padx=(5, 0))
        
        self.setup_attributes_list(left_frame)
        self.setup_attribute_editor(right_frame)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_control_buttons(main_frame)
    
    def setup_attributes_list(self, parent_frame):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏—Å–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        list_title = ctk.CTkLabel(parent_frame, text="–°–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤", 
                                font=ctk.CTkFont(size=16, weight="bold"))
        list_title.pack(pady=(10, 5))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
        list_buttons_frame = ctk.CTkFrame(parent_frame)
        list_buttons_frame.pack(fill="x", padx=10, pady=5)
        
        self.add_attr_btn = ctk.CTkButton(list_buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", 
                                        command=self.add_attribute, width=80)
        self.add_attr_btn.pack(side="left", padx=5)
        
        self.delete_attr_btn = ctk.CTkButton(list_buttons_frame, text="üóë –£–¥–∞–ª–∏—Ç—å", 
                                           command=self.delete_attribute, width=80, state="disabled")
        self.delete_attr_btn.pack(side="left", padx=5)
        
        self.refresh_btn = ctk.CTkButton(list_buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                                       command=self.load_attributes, width=80)
        self.refresh_btn.pack(side="right", padx=5)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        tree_frame = ctk.CTkFrame(parent_frame)
        tree_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º tkinter Treeview, —Ç–∞–∫ –∫–∞–∫ customtkinter –µ–≥–æ –Ω–µ –∏–º–µ–µ—Ç
        style = ttk.Style()
        style.theme_use("clam")
        
        self.attributes_tree = ttk.Treeview(tree_frame, columns=("id", "name", "slug", "terms"), show="headings")
        self.attributes_tree.heading("id", text="ID")
        self.attributes_tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.attributes_tree.heading("slug", text="Slug")
        self.attributes_tree.heading("terms", text="–¢–µ—Ä–º–∏–Ω—ã")
        
        self.attributes_tree.column("id", width=50)
        self.attributes_tree.column("name", width=150)
        self.attributes_tree.column("slug", width=150)
        self.attributes_tree.column("terms", width=100)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –¥–µ—Ä–µ–≤–∞
        tree_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=self.attributes_tree.yview)
        self.attributes_tree.configure(yscrollcommand=tree_scrollbar.set)
        
        self.attributes_tree.pack(side="left", fill="both", expand=True)
        tree_scrollbar.pack(side="right", fill="y")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.attributes_tree.bind("<<TreeviewSelect>>", self.on_attribute_select)
    
    def setup_attribute_editor(self, parent_frame):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        editor_title = ctk.CTkLabel(parent_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞", 
                                  font=ctk.CTkFont(size=16, weight="bold"))
        editor_title.pack(pady=(10, 5))
        
        # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        form_frame = ctk.CTkScrollableFrame(parent_frame)
        form_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞
        ctk.CTkLabel(form_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞:").pack(anchor="w", pady=(5, 0))
        self.attr_name_entry = ctk.CTkEntry(form_frame, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞")
        self.attr_name_entry.pack(fill="x", pady=(0, 10))
        
        # Slug –∞—Ç—Ä–∏–±—É—Ç–∞
        ctk.CTkLabel(form_frame, text="Slug (–¥–ª—è URL):").pack(anchor="w", pady=(5, 0))
        self.attr_slug_entry = ctk.CTkEntry(form_frame, placeholder_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        self.attr_slug_entry.pack(fill="x", pady=(0, 10))
        
        # –¢–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        ctk.CTkLabel(form_frame, text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:").pack(anchor="w", pady=(5, 0))
        self.order_by_var = ctk.StringVar(value="menu_order")
        order_by_frame = ctk.CTkFrame(form_frame)
        order_by_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkRadioButton(order_by_frame, text="–ü–æ –ø–æ—Ä—è–¥–∫—É –º–µ–Ω—é", variable=self.order_by_var, 
                          value="menu_order").pack(side="left", padx=10)
        ctk.CTkRadioButton(order_by_frame, text="–ü–æ –∏–º–µ–Ω–∏", variable=self.order_by_var, 
                          value="name").pack(side="left", padx=10)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = ctk.CTkFrame(form_frame)
        settings_frame.pack(fill="x", pady=(0, 10))
        
        self.has_archives_var = ctk.BooleanVar()
        ctk.CTkCheckBox(settings_frame, text="–í–∫–ª—é—á–∏—Ç—å –∞—Ä—Ö–∏–≤—ã", 
                       variable=self.has_archives_var).pack(anchor="w", padx=10, pady=5)
        
        # –¢–µ—Ä–º–∏–Ω—ã (–∑–Ω–∞—á–µ–Ω–∏—è) –∞—Ç—Ä–∏–±—É—Ç–∞
        ctk.CTkLabel(form_frame, text="–ó–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞:", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(20, 5))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–º–∏
        terms_buttons_frame = ctk.CTkFrame(form_frame)
        terms_buttons_frame.pack(fill="x", pady=5)
        
        self.add_term_btn = ctk.CTkButton(terms_buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ", 
                                        command=self.add_term, state="disabled")
        self.add_term_btn.pack(side="left", padx=5)
        
        self.delete_term_btn = ctk.CTkButton(terms_buttons_frame, text="üóë –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ", 
                                           command=self.delete_term, state="disabled")
        self.delete_term_btn.pack(side="left", padx=5)
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤
        terms_frame = ctk.CTkFrame(form_frame)
        terms_frame.pack(fill="x", pady=5)
        
        self.terms_listbox = tk.Listbox(terms_frame, height=6)
        self.terms_listbox.pack(fill="x", padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_buttons_frame = ctk.CTkFrame(form_frame)
        save_buttons_frame.pack(fill="x", pady=(20, 5))
        
        self.save_attr_btn = ctk.CTkButton(save_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç", 
                                         command=self.save_attribute, state="disabled")
        self.save_attr_btn.pack(side="right", padx=5)
        
        self.cancel_edit_btn = ctk.CTkButton(save_buttons_frame, text="‚Ü∂ –û—Ç–º–µ–Ω–∏—Ç—å", 
                                           command=self.cancel_edit, state="disabled")
        self.cancel_edit_btn.pack(side="right", padx=5)
    
    def setup_control_buttons(self, parent_frame):
        """–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º"""
        buttons_frame = ctk.CTkFrame(parent_frame)
        buttons_frame.pack(fill="x", pady=(10, 0))
        
        close_btn = ctk.CTkButton(buttons_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=self.close_dialog)
        close_btn.pack(side="right", padx=5)
    
    def load_attributes(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        def load_thread():
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                self.window.after(0, lambda: self.refresh_btn.configure(text="‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞..."))
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                self.attributes = self.wc_manager.get_attributes()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.window.after(0, self.update_attributes_list)
                
            except Exception as e:
                self.window.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã:\n{e}"))
            finally:
                self.window.after(0, lambda: self.refresh_btn.configure(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å"))
        
        threading.Thread(target=load_thread, daemon=True).start()
    
    def update_attributes_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        for item in self.attributes_tree.get_children():
            self.attributes_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        for attr in self.attributes:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
            terms_count = len(self.wc_manager.get_attribute_terms(attr['id']))
            
            self.attributes_tree.insert("", "end", values=(
                attr['id'],
                attr['name'],
                attr['slug'],
                f"{terms_count} —à—Ç."
            ))
    
    def on_attribute_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        selection = self.attributes_tree.selection()
        if not selection:
            self.selected_attribute = None
            self.clear_editor()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
        item = self.attributes_tree.item(selection[0])
        attr_id = int(item['values'][0])
        
        # –ù–∞—Ö–æ–¥–∏–º –∞—Ç—Ä–∏–±—É—Ç –≤ —Å–ø–∏—Å–∫–µ
        self.selected_attribute = next((attr for attr in self.attributes if attr['id'] == attr_id), None)
        
        if self.selected_attribute:
            self.load_attribute_to_editor()
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            self.delete_attr_btn.configure(state="normal")
            self.add_term_btn.configure(state="normal")
            self.save_attr_btn.configure(state="normal")
            self.cancel_edit_btn.configure(state="normal")
    
    def load_attribute_to_editor(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä"""
        if not self.selected_attribute:
            return
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        self.attr_name_entry.delete(0, "end")
        self.attr_name_entry.insert(0, self.selected_attribute.get('name', ''))
        
        self.attr_slug_entry.delete(0, "end")
        self.attr_slug_entry.insert(0, self.selected_attribute.get('slug', ''))
        
        self.order_by_var.set(self.selected_attribute.get('order_by', 'menu_order'))
        self.has_archives_var.set(self.selected_attribute.get('has_archives', False))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ä–º–∏–Ω—ã
        self.load_terms()
    
    def load_terms(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–∞"""
        if not self.selected_attribute:
            return
        
        def load_terms_thread():
            try:
                terms = self.wc_manager.get_attribute_terms(self.selected_attribute['id'])
                self.window.after(0, lambda: self.update_terms_list(terms))
            except Exception as e:
                self.window.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã:\n{e}"))
        
        threading.Thread(target=load_terms_thread, daemon=True).start()
    
    def update_terms_list(self, terms):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤"""
        self.terms_listbox.delete(0, "end")
        for term in terms:
            self.terms_listbox.insert("end", f"{term['name']} (ID: {term['id']})")
    
    def clear_editor(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        self.attr_name_entry.delete(0, "end")
        self.attr_slug_entry.delete(0, "end")
        self.order_by_var.set("menu_order")
        self.has_archives_var.set(False)
        self.terms_listbox.delete(0, "end")
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        self.delete_attr_btn.configure(state="disabled")
        self.add_term_btn.configure(state="disabled")
        self.delete_term_btn.configure(state="disabled")
        self.save_attr_btn.configure(state="disabled")
        self.cancel_edit_btn.configure(state="disabled")
    
    def add_attribute(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞"""
        # –û—á–∏—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
        self.selected_attribute = None
        self.clear_editor()
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_attr_btn.configure(state="normal")
        self.cancel_edit_btn.configure(state="normal")
    
    def delete_attribute(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞"""
        if not self.selected_attribute:
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                   f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç '{self.selected_attribute['name']}'?\n"
                                   "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")
        
        if result:
            def delete_thread():
                try:
                    success = self.wc_manager.delete_attribute(self.selected_attribute['id'])
                    if success:
                        self.window.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê—Ç—Ä–∏–±—É—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"))
                        self.window.after(0, self.load_attributes)
                        self.window.after(0, self.clear_editor)
                    else:
                        self.window.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç"))
                except Exception as e:
                    self.window.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–∞:\n{e}"))
            
            threading.Thread(target=delete_thread, daemon=True).start()
    
    def save_attribute(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        name = self.attr_name_entry.get().strip()
        if not name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        slug = self.attr_slug_entry.get().strip()
        if not slug:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            slug = name.lower().replace(' ', '-').replace('_', '-')
        
        attribute_data = {
            "name": name,
            "slug": slug,
            "order_by": self.order_by_var.get(),
            "has_archives": self.has_archives_var.get()
        }
        
        def save_thread():
            try:
                if self.selected_attribute:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç
                    result = self.wc_manager.update_attribute(self.selected_attribute['id'], attribute_data)
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—Ç—Ä–∏–±—É—Ç
                    result = self.wc_manager.create_attribute(attribute_data)
                
                if result:
                    self.window.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", 
                                    "–ê—Ç—Ä–∏–±—É—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω" if self.selected_attribute else "–ê—Ç—Ä–∏–±—É—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"))
                    self.window.after(0, self.load_attributes)
                    self.window.after(0, self.clear_editor)
                else:
                    self.window.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç"))
                    
            except Exception as e:
                self.window.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–∞:\n{e}"))
        
        threading.Thread(target=save_thread, daemon=True).start()
    
    def cancel_edit(self):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.selected_attribute:
            self.load_attribute_to_editor()
        else:
            self.clear_editor()
    
    def add_term(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç—É"""
        if not self.selected_attribute:
            return
        
        # –ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞
        dialog = ctk.CTkInputDialog(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞:", title="–î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ")
        term_name = dialog.get_input()
        
        if term_name and term_name.strip():
            term_data = {
                "name": term_name.strip(),
                "slug": term_name.strip().lower().replace(' ', '-')
            }
            
            def add_term_thread():
                try:
                    result = self.wc_manager.create_attribute_term(self.selected_attribute['id'], term_data)
                    if result:
                        self.window.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ"))
                        self.window.after(0, self.load_terms)
                    else:
                        self.window.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"))
                except Exception as e:
                    self.window.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è:\n{e}"))
            
            threading.Thread(target=add_term_thread, daemon=True).start()
    
    def delete_term(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞"""
        if not self.selected_attribute:
            return
        
        selection = self.terms_listbox.curselection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Ä–º–∏–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        term_text = self.terms_listbox.get(selection[0])
        try:
            term_id = int(term_text.split("ID: ")[1].rstrip(")"))
        except (IndexError, ValueError):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–Ω–∞—á–µ–Ω–∏—è")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ '{term_text.split(' (ID:')[0]}'?")
        
        if result:
            def delete_term_thread():
                try:
                    success = self.wc_manager.delete_attribute_term(self.selected_attribute['id'], term_id)
                    if success:
                        self.window.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ"))
                        self.window.after(0, self.load_terms)
                    else:
                        self.window.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"))
                except Exception as e:
                    self.window.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è:\n{e}"))
            
            threading.Thread(target=delete_term_thread, daemon=True).start()
    
    def close_dialog(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        self.window.destroy() 