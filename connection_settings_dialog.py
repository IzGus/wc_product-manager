"""
–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ WooCommerce API
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""
import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
from typing import Optional, Dict, Any
import re
from urllib.parse import urlparse

from config import config_manager, ConnectionProfile

class ConnectionSettingsDialog:
    """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ WooCommerce API"""
    
    def __init__(self, parent):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
        """
        self.parent = parent
        self.result = None
        self.current_profile = None
        
        self.setup_dialog()
        self.load_profiles()
        
    def setup_dialog(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞"""
        self.dialog = ctk.CTkToplevel(self.parent)
        self.dialog.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WooCommerce")
        self.dialog.geometry("800x600")
        self.dialog.transient(self.parent)
        self.dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (800 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (600 // 2)
        self.dialog.geometry(f"800x600+{x}+{y}")
        
        self.setup_ui()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(self.dialog)
        main_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(main_container, 
                                  text="üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WooCommerce", 
                                  font=ctk.CTkFont(size=20, weight="bold"))
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ctk.CTkTabview(main_container)
        self.notebook.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.setup_quick_connect_tab()
        self.setup_profiles_tab()
        self.setup_advanced_tab()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_action_buttons(main_container)
        
    def setup_quick_connect_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        quick_tab = self.notebook.add("–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_frame = ctk.CTkFrame(quick_tab)
        desc_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(desc_frame, 
                    text="üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WooCommerce",
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)
        
        ctk.CTkLabel(desc_frame,
                    text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∞—à–µ–º—É WooCommerce –º–∞–≥–∞–∑–∏–Ω—É",
                    font=ctk.CTkFont(size=12)).pack(pady=5)
        
        # –§–æ—Ä–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        form_frame = ctk.CTkFrame(quick_tab)
        form_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # URL —Å–∞–π—Ç–∞
        ctk.CTkLabel(form_frame, text="URL —Å–∞–π—Ç–∞:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=10, pady=(10, 0))
        self.quick_url_entry = ctk.CTkEntry(form_frame, placeholder_text="https://your-store.com")
        self.quick_url_entry.pack(fill="x", padx=10, pady=5)
        self.quick_url_entry.bind("<KeyRelease>", self.on_url_change)
        
        # Consumer Key
        ctk.CTkLabel(form_frame, text="Consumer Key:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=10, pady=(10, 0))
        self.quick_key_entry = ctk.CTkEntry(form_frame, placeholder_text="ck_xxxxxxxxxxxxxxxxxxxxxxxxx")
        self.quick_key_entry.pack(fill="x", padx=10, pady=5)
        
        # Consumer Secret
        ctk.CTkLabel(form_frame, text="Consumer Secret:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=10, pady=(10, 0))
        self.quick_secret_entry = ctk.CTkEntry(form_frame, placeholder_text="cs_xxxxxxxxxxxxxxxxxxxxxxxxx", show="*")
        self.quick_secret_entry.pack(fill="x", padx=10, pady=5)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–µ–∫—Ä–µ—Ç
        show_secret_var = ctk.BooleanVar()
        show_secret_cb = ctk.CTkCheckBox(form_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å Consumer Secret", 
                                        variable=show_secret_var, command=lambda: self.toggle_secret_visibility(show_secret_var.get()))
        show_secret_cb.pack(anchor="w", padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        quick_buttons_frame = ctk.CTkFrame(form_frame)
        quick_buttons_frame.pack(fill="x", padx=10, pady=10)
        
        test_btn = ctk.CTkButton(quick_buttons_frame, text="üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", 
                                command=self.test_quick_connection, width=150)
        test_btn.pack(side="left", padx=5)
        
        save_profile_btn = ctk.CTkButton(quick_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å", 
                                        command=self.save_as_profile, width=180)
        save_profile_btn.pack(side="left", padx=5)
        
        connect_btn = ctk.CTkButton(quick_buttons_frame, text="‚úÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", 
                                   command=self.quick_connect, width=150)
        connect_btn.pack(side="right", padx=5)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.quick_status_label = ctk.CTkLabel(form_frame, text="", font=ctk.CTkFont(size=12))
        self.quick_status_label.pack(pady=5)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        self.setup_instruction_section(quick_tab)
        
    def setup_profiles_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
        profiles_tab = self.notebook.add("–ü—Ä–æ—Ñ–∏–ª–∏")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(profiles_tab)
        header_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(header_frame, 
                    text="üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(profiles_tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
        list_frame = ctk.CTkFrame(main_frame)
        list_frame.pack(side="left", fill="both", expand=True, padx=(10, 5), pady=10)
        
        ctk.CTkLabel(list_frame, text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        columns = ("–ù–∞–∑–≤–∞–Ω–∏–µ", "URL", "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
        self.profiles_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=12)
        
        for col in columns:
            self.profiles_tree.heading(col, text=col)
            if col == "–ù–∞–∑–≤–∞–Ω–∏–µ":
                self.profiles_tree.column(col, width=150, minwidth=100)
            elif col == "URL":
                self.profiles_tree.column(col, width=200, minwidth=150)
            else:
                self.profiles_tree.column(col, width=150, minwidth=100)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
        profiles_scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=self.profiles_tree.yview)
        self.profiles_tree.configure(yscrollcommand=profiles_scrollbar.set)
        
        self.profiles_tree.pack(side="left", fill="both", expand=True, padx=10, pady=10)
        profiles_scrollbar.pack(side="right", fill="y", pady=10)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.profiles_tree.bind("<<TreeviewSelect>>", self.on_profile_select)
        self.profiles_tree.bind("<Double-1>", self.edit_profile)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        control_frame = ctk.CTkFrame(main_frame)
        control_frame.pack(side="right", fill="y", padx=(5, 10), pady=10)
        
        ctk.CTkLabel(control_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", font=ctk.CTkFont(weight="bold")).pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.use_profile_btn = ctk.CTkButton(control_frame, text="üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", 
                                            command=self.use_selected_profile, width=140)
        self.use_profile_btn.pack(pady=5)
        
        self.edit_profile_btn = ctk.CTkButton(control_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                                             command=self.edit_profile, width=140)
        self.edit_profile_btn.pack(pady=5)
        
        self.delete_profile_btn = ctk.CTkButton(control_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                                               command=self.delete_profile, width=140)
        self.delete_profile_btn.pack(pady=5)
        
        ctk.CTkLabel(control_frame, text="").pack(pady=10)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        
        self.export_btn = ctk.CTkButton(control_frame, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", 
                                       command=self.export_profiles, width=140)
        self.export_btn.pack(pady=5)
        
        self.import_btn = ctk.CTkButton(control_frame, text="üì• –ò–º–ø–æ—Ä—Ç", 
                                       command=self.import_profiles, width=140)
        self.import_btn.pack(pady=5)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.use_profile_btn.configure(state="disabled")
        self.edit_profile_btn.configure(state="disabled")
        self.delete_profile_btn.configure(state="disabled")
        
    def setup_advanced_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        advanced_tab = self.notebook.add("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(advanced_tab)
        header_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(header_frame, 
                    text="‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)
        
        # –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ctk.CTkFrame(advanced_tab)
        settings_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # API –≤–µ—Ä—Å–∏—è
        ctk.CTkLabel(settings_frame, text="–í–µ—Ä—Å–∏—è API:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=10, pady=(10, 0))
        self.api_version_menu = ctk.CTkOptionMenu(settings_frame, values=["wc/v3", "wc/v2", "wc/v1"])
        self.api_version_menu.pack(anchor="w", padx=10, pady=5)
        self.api_version_menu.set("wc/v3")
        
        # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        ctk.CTkLabel(settings_frame, text="–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–µ–∫—É–Ω–¥—ã):", font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=10, pady=(10, 0))
        self.timeout_entry = ctk.CTkEntry(settings_frame, placeholder_text="30")
        self.timeout_entry.pack(anchor="w", padx=10, pady=5, fill="x")
        self.timeout_entry.insert(0, "30")
        
        # –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        ctk.CTkLabel(settings_frame, text="–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=10, pady=(10, 0))
        self.per_page_entry = ctk.CTkEntry(settings_frame, placeholder_text="100")
        self.per_page_entry.pack(anchor="w", padx=10, pady=5, fill="x")
        self.per_page_entry.insert(0, "100")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        options_frame = ctk.CTkFrame(settings_frame)
        options_frame.pack(fill="x", padx=10, pady=20)
        
        ctk.CTkLabel(options_frame, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", padx=10, pady=5)
        
        self.ssl_verify_var = ctk.BooleanVar(value=True)
        ssl_cb = ctk.CTkCheckBox(options_frame, text="–ü—Ä–æ–≤–µ—Ä—è—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", variable=self.ssl_verify_var)
        ssl_cb.pack(anchor="w", padx=10, pady=2)
        
        self.debug_mode_var = ctk.BooleanVar(value=False)
        debug_cb = ctk.CTkCheckBox(options_frame, text="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏", variable=self.debug_mode_var)
        debug_cb.pack(anchor="w", padx=10, pady=2)
        
    def setup_instruction_section(self, parent):
        """–°–µ–∫—Ü–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
        instruction_frame = ctk.CTkFrame(parent)
        instruction_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(instruction_frame, 
                    text="üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Consumer Key –∏ Consumer Secret:",
                    font=ctk.CTkFont(size=14, weight="bold")).pack(pady=5)
        
        instructions = [
            "1. –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É WordPress",
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ WooCommerce ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Üí REST API",
            "3. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á'",
            "4. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: '–ß—Ç–µ–Ω–∏–µ/–ó–∞–ø–∏—Å—å'",
            "5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Consumer Key –∏ Consumer Secret"
        ]
        
        for instruction in instructions:
            ctk.CTkLabel(instruction_frame, text=instruction, font=ctk.CTkFont(size=11)).pack(anchor="w", padx=10)
        
    def setup_action_buttons(self, parent):
        """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        buttons_frame = ctk.CTkFrame(parent)
        buttons_frame.pack(fill="x", padx=10, pady=10)
        
        cancel_btn = ctk.CTkButton(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=self.cancel, width=100)
        cancel_btn.pack(side="left", padx=5)
        
        save_btn = ctk.CTkButton(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å", command=self.save_and_close, width=180)
        save_btn.pack(side="right", padx=5)
        
    def toggle_secret_visibility(self, show: bool):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ Consumer Secret"""
        self.quick_secret_entry.configure(show="" if show else "*")
        
    def on_url_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL"""
        url = self.quick_url_entry.get().strip()
        if url and not url.startswith(('http://', 'https://')):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º https://
            self.quick_url_entry.delete(0, "end")
            self.quick_url_entry.insert(0, f"https://{url}")
    
    def validate_url(self, url: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è URL"""
        try:
            result = urlparse(url)
            return all([result.scheme, result.netloc])
        except:
            return False
    
    def validate_api_key(self, key: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞"""
        # Consumer Key –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å ck_ –∏ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
        if key.startswith('ck_') and len(key) > 10:
            return True
        return False
    
    def validate_api_secret(self, secret: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è API —Å–µ–∫—Ä–µ—Ç–∞"""
        # Consumer Secret –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å cs_ –∏ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã  
        if secret.startswith('cs_') and len(secret) > 10:
            return True
        return False
    
    def test_quick_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        url = self.quick_url_entry.get().strip()
        key = self.quick_key_entry.get().strip()
        secret = self.quick_secret_entry.get().strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not url:
            self.show_quick_status("‚ùå –í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞", "red")
            return
        
        if not self.validate_url(url):
            self.show_quick_status("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Å–∞–π—Ç–∞", "red")
            return
        
        if not key:
            self.show_quick_status("‚ùå –í–≤–µ–¥–∏—Ç–µ Consumer Key", "red")
            return
        
        if not self.validate_api_key(key):
            self.show_quick_status("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Consumer Key", "red")
            return
        
        if not secret:
            self.show_quick_status("‚ùå –í–≤–µ–¥–∏—Ç–µ Consumer Secret", "red")
            return
        
        if not self.validate_api_secret(secret):
            self.show_quick_status("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Consumer Secret", "red")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_profile = ConnectionProfile(
            name="test",
            site_url=url,
            consumer_key=key,
            consumer_secret=secret
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self.show_quick_status("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...", "blue")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç API
        try:
            from woocommerce import API
            
            api = API(
                url=test_profile.site_url,
                consumer_key=test_profile.consumer_key,
                consumer_secret=test_profile.consumer_secret,
                version=test_profile.api_version,
                timeout=test_profile.timeout
            )
            
            response = api.get("products", params={"per_page": 1})
            
            if response.status_code == 200:
                self.show_quick_status("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!", "green")
            else:
                self.show_quick_status(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}", "red")
                
        except Exception as e:
            self.show_quick_status(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}...", "red")
    
    def show_quick_status(self, message: str, color: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.quick_status_label.configure(text=message, text_color=color)
        
    def save_as_profile(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å"""
        url = self.quick_url_entry.get().strip()
        key = self.quick_key_entry.get().strip()
        secret = self.quick_secret_entry.get().strip()
        
        if not all([url, key, secret]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è
        profile_name = config_manager._generate_profile_name(url)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile_name = ctk.CTkInputDialog(
            text=f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è:",
            title="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"
        ).get_input()
        
        if not profile_name:
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = ConnectionProfile(
            name=profile_name,
            site_url=url,
            consumer_key=key,
            consumer_secret=secret,
            api_version=self.api_version_menu.get(),
            timeout=int(self.timeout_entry.get() or 30),
            products_per_page=int(self.per_page_entry.get() or 100)
        )
        
        if config_manager.add_profile(profile):
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            self.load_profiles()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    
    def quick_connect(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        url = self.quick_url_entry.get().strip()
        key = self.quick_key_entry.get().strip()
        secret = self.quick_secret_entry.get().strip()
        
        if not all([url, key, secret]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = config_manager.create_quick_profile(url, key, secret)
        config_manager.current_profile = profile
        
        self.result = profile
        self.dialog.destroy()
    
    def load_profiles(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for item in self.profiles_tree.get_children():
            self.profiles_tree.delete(item)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
        for profile in config_manager.profiles.values():
            last_used = "–ù–∏–∫–æ–≥–¥–∞"
            if profile.last_used:
                try:
                    from datetime import datetime
                    dt = datetime.fromisoformat(profile.last_used)
                    last_used = dt.strftime("%d.%m.%Y %H:%M")
                except:
                    last_used = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            name = profile.name
            if config_manager.current_profile and config_manager.current_profile.name == profile.name:
                name = f"üìå {name} (—Ç–µ–∫—É—â–∏–π)"
            
            self.profiles_tree.insert("", "end", values=(name, profile.site_url, last_used), tags=(profile.name,))
    
    def on_profile_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        selection = self.profiles_tree.selection()
        if selection:
            self.use_profile_btn.configure(state="normal")
            self.edit_profile_btn.configure(state="normal")
            self.delete_profile_btn.configure(state="normal")
        else:
            self.use_profile_btn.configure(state="disabled")
            self.edit_profile_btn.configure(state="disabled")
            self.delete_profile_btn.configure(state="disabled")
    
    def use_selected_profile(self):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        selection = self.profiles_tree.selection()
        if not selection:
            return
        
        item = self.profiles_tree.item(selection[0])
        profile_name = item["tags"][0] if item["tags"] else ""
        
        if config_manager.set_current_profile(profile_name):
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            self.load_profiles()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            self.result = config_manager.current_profile
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    
    def edit_profile(self, event=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        selection = self.profiles_tree.selection()
        if not selection:
            return
        
        item = self.profiles_tree.item(selection[0])
        profile_name = item["tags"][0] if item["tags"] else ""
        profile = config_manager.get_profile(profile_name)
        
        if not profile:
            return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_dialog = ProfileEditDialog(self.dialog, profile)
        self.dialog.wait_window(edit_dialog.dialog)
        
        if edit_dialog.result:
            config_manager.update_profile(edit_dialog.result)
            self.load_profiles()
    
    def delete_profile(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        selection = self.profiles_tree.selection()
        if not selection:
            return
        
        item = self.profiles_tree.item(selection[0])
        profile_name = item["tags"][0] if item["tags"] else ""
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å '{profile_name}'?"):
            if config_manager.delete_profile(profile_name):
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω")
                self.load_profiles()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    
    def export_profiles(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        filename = filedialog.asksaveasfilename(
            title="–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            if config_manager.export_profiles(filename):
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ—Ñ–∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏")
    
    def import_profiles(self):
        """–ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        filename = filedialog.askopenfilename(
            title="–ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            if config_manager.import_profiles(filename):
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ—Ñ–∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
                self.load_profiles()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏")
    
    def save_and_close(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ"""
        self.result = config_manager.current_profile
        self.dialog.destroy()
    
    def cancel(self):
        """–û—Ç–º–µ–Ω–∞"""
        self.result = None
        self.dialog.destroy()

class ProfileEditDialog:
    """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    
    def __init__(self, parent, profile: ConnectionProfile):
        self.parent = parent
        self.profile = profile
        self.result = None
        
        self.setup_dialog()
        self.load_profile_data()
    
    def setup_dialog(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ª–æ–≥–∞"""
        self.dialog = ctk.CTkToplevel(self.parent)
        self.dialog.title(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {self.profile.name}")
        self.dialog.geometry("500x400")
        self.dialog.transient(self.parent)
        self.dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (400 // 2)
        self.dialog.geometry(f"500x400+{x}+{y}")
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = ctk.CTkFrame(self.dialog)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(main_frame, text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)
        
        # –ü–æ–ª—è
        ctk.CTkLabel(main_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:").pack(anchor="w", padx=10, pady=(10, 0))
        self.name_entry = ctk.CTkEntry(main_frame)
        self.name_entry.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(main_frame, text="URL —Å–∞–π—Ç–∞:").pack(anchor="w", padx=10, pady=(10, 0))
        self.url_entry = ctk.CTkEntry(main_frame)
        self.url_entry.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(main_frame, text="Consumer Key:").pack(anchor="w", padx=10, pady=(10, 0))
        self.key_entry = ctk.CTkEntry(main_frame)
        self.key_entry.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(main_frame, text="Consumer Secret:").pack(anchor="w", padx=10, pady=(10, 0))
        self.secret_entry = ctk.CTkEntry(main_frame, show="*")
        self.secret_entry.pack(fill="x", padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(main_frame)
        buttons_frame.pack(fill="x", padx=10, pady=20)
        
        cancel_btn = ctk.CTkButton(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=self.cancel)
        cancel_btn.pack(side="left", padx=5)
        
        save_btn = ctk.CTkButton(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save)
        save_btn.pack(side="right", padx=5)
    
    def load_profile_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
        self.name_entry.insert(0, self.profile.name)
        self.url_entry.insert(0, self.profile.site_url)
        self.key_entry.insert(0, self.profile.consumer_key)
        self.secret_entry.insert(0, self.profile.consumer_secret)
    
    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        name = self.name_entry.get().strip()
        url = self.url_entry.get().strip()
        key = self.key_entry.get().strip()
        secret = self.secret_entry.get().strip()
        
        if not all([name, url, key, secret]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        self.profile.name = name
        self.profile.site_url = url
        self.profile.consumer_key = key
        self.profile.consumer_secret = secret
        
        self.result = self.profile
        self.dialog.destroy()
    
    def cancel(self):
        """–û—Ç–º–µ–Ω–∞"""
        self.result = None
        self.dialog.destroy() 