"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WooCommerce Product Manager
"""
import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import threading
import logging
from typing import List, Dict, Any, Optional
import json

from woocommerce_manager import WooCommerceManager
from product_models import Product
from csv_manager import CSVManager
from config import config_manager, ConnectionProfile
from connection_settings_dialog import ConnectionSettingsDialog

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")

logger = logging.getLogger(__name__)

class ProductManagerGUI:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI"""
        self.root = ctk.CTk()
        self.root.title("WooCommerce Product Manager")
        self.root.geometry("1400x800")
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.wc_manager: Optional[WooCommerceManager] = None
        self.csv_manager = CSVManager()
        
        # –î–∞–Ω–Ω—ã–µ
        self.products: List[Product] = []
        self.categories: List[Dict] = []
        self.attributes: List[Dict] = []
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_loading = False
        
        self.setup_ui()
        self.setup_styles()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.setup_menu()
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
        self.setup_api_frame()
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_control_frame()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å
        self.setup_main_area()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.setup_status_bar()
    
    def setup_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        
        # –ò–º–ø–æ—Ä—Ç
        import_menu = tk.Menu(file_menu, tearoff=0)
        file_menu.add_cascade(label="–ò–º–ø–æ—Ä—Ç", menu=import_menu)
        import_menu.add_command(label="–ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞", command=self.import_csv)
        import_menu.add_command(label="–ü—Ä–æ—Å—Ç–æ–π CSV", command=lambda: self.import_csv('simple'))
        import_menu.add_command(label="WooCommerce CSV", command=lambda: self.import_csv('woocommerce'))
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        export_menu = tk.Menu(file_menu, tearoff=0)
        file_menu.add_cascade(label="–≠–∫—Å–ø–æ—Ä—Ç", menu=export_menu)
        export_menu.add_command(label="–ü—Ä–æ—Å—Ç–æ–π CSV", command=lambda: self.export_csv('simple'))
        export_menu.add_command(label="WooCommerce CSV", command=lambda: self.export_csv('woocommerce'))
        
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", menu=settings_menu)
        settings_menu.add_command(label="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è WooCommerce", command=self.open_connection_settings)
        settings_menu.add_separator()
        settings_menu.add_command(label="üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π", command=self.export_profiles_menu)
        settings_menu.add_command(label="üì• –ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π", command=self.import_profiles_menu)
        
        # –ü–æ–º–æ—â—å
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)
        help_menu.add_command(label="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", command=self.show_setup_instructions)
        help_menu.add_command(label="üÜï –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ v3.0", command=self.show_new_features)
        help_menu.add_separator()
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
    
    def setup_api_frame(self):
        """–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        api_frame = ctk.CTkFrame(self.root)
        api_frame.pack(fill="x", padx=10, pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(api_frame, text="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WooCommerce", font=ctk.CTkFont(size=16, weight="bold"))
        title_label.pack(pady=5)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(api_frame)
        main_container.pack(fill="x", padx=10, pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        info_frame = ctk.CTkFrame(main_container)
        info_frame.pack(fill="x", pady=5)
        
        # –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        current_profile_frame = ctk.CTkFrame(info_frame)
        current_profile_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(current_profile_frame, text="–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:", font=ctk.CTkFont(weight="bold")).pack(side="left", padx=5)
        self.current_profile_label = ctk.CTkLabel(current_profile_frame, text="–ù–µ –≤—ã–±—Ä–∞–Ω", text_color="gray")
        self.current_profile_label.pack(side="left", padx=10)
        
        # URL —Å–∞–π—Ç–∞
        url_frame = ctk.CTkFrame(info_frame)
        url_frame.pack(fill="x", padx=10, pady=2)
        
        ctk.CTkLabel(url_frame, text="URL —Å–∞–π—Ç–∞:", font=ctk.CTkFont(weight="bold")).pack(side="left", padx=5)
        self.site_url_label = ctk.CTkLabel(url_frame, text="–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", text_color="gray")
        self.site_url_label.pack(side="left", padx=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ctk.CTkFrame(main_container)
        buttons_frame.pack(fill="x", padx=10, pady=5)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        self.settings_btn = ctk.CTkButton(buttons_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", 
                                         command=self.open_connection_settings, width=200)
        self.settings_btn.pack(side="left", padx=5)
        
        self.test_btn = ctk.CTkButton(buttons_frame, text="üîç –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", 
                                     command=self.test_connection, state="disabled", width=150)
        self.test_btn.pack(side="left", padx=5)
        
        # –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
        profiles_frame = ctk.CTkFrame(buttons_frame)
        profiles_frame.pack(side="right", padx=5)
        
        ctk.CTkLabel(profiles_frame, text="–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ:").pack(side="left", padx=5)
        self.profile_menu = ctk.CTkOptionMenu(profiles_frame, values=["–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π"], 
                                             command=self.switch_profile, width=150)
        self.profile_menu.pack(side="left", padx=5)
        self.profile_menu.set("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å...")
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        status_frame = ctk.CTkFrame(main_container)
        status_frame.pack(fill="x", padx=10, pady=5)
        
        self.connection_status = ctk.CTkLabel(status_frame, text="‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", text_color="red")
        self.connection_status.pack(side="left", padx=10, pady=5)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.update_connection_info()
    
    def setup_control_frame(self):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
        control_frame = ctk.CTkFrame(self.root)
        control_frame.pack(fill="x", padx=10, pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(control_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", font=ctk.CTkFont(size=16, weight="bold"))
        title_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ctk.CTkFrame(control_frame)
        button_frame.pack(fill="x", padx=10, pady=5)
        
        self.load_btn = ctk.CTkButton(button_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", command=self.load_products, state="disabled")
        self.load_btn.pack(side="left", padx=5)
        
        self.add_btn = ctk.CTkButton(button_frame, text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", command=self.add_product, state="disabled")
        self.add_btn.pack(side="left", padx=5)
        
        self.edit_btn = ctk.CTkButton(button_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_product, state="disabled")
        self.edit_btn.pack(side="left", padx=5)
        
        self.delete_btn = ctk.CTkButton(button_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.delete_product, state="disabled")
        self.delete_btn.pack(side="left", padx=5)
        
        self.save_btn = ctk.CTkButton(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", command=self.save_changes, state="disabled")
        self.save_btn.pack(side="left", padx=5)
        
        # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
        filter_frame = ctk.CTkFrame(button_frame)
        filter_frame.pack(side="right", padx=5)
        
        ctk.CTkLabel(filter_frame, text="–ü–æ–∏—Å–∫:").pack(side="left", padx=2)
        self.search_entry = ctk.CTkEntry(filter_frame, placeholder_text="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ SKU")
        self.search_entry.pack(side="left", padx=2)
        self.search_entry.bind("<KeyRelease>", self.on_search)
        
        self.filter_btn = ctk.CTkButton(filter_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_search, width=70)
        self.filter_btn.pack(side="left", padx=2)
    
    def setup_main_area(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ç–æ–≤–∞—Ä–æ–≤"""
        main_frame = ctk.CTkFrame(self.root)
        main_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(main_frame, text="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", font=ctk.CTkFont(size=16, weight="bold"))
        title_label.pack(pady=5)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_frame = ctk.CTkFrame(main_frame)
        table_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        columns = ("ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "SKU", "–¢–∏–ø", "–¶–µ–Ω–∞", "–°—Ç–∞—Ç—É—Å", "–û—Å—Ç–∞—Ç–æ–∫", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
        self.products_tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for col in columns:
            self.products_tree.heading(col, text=col)
            if col == "ID":
                self.products_tree.column(col, width=60, minwidth=50)
            elif col == "–ù–∞–∑–≤–∞–Ω–∏–µ":
                self.products_tree.column(col, width=250, minwidth=200)
            elif col == "SKU":
                self.products_tree.column(col, width=120, minwidth=100)
            elif col == "–¢–∏–ø":
                self.products_tree.column(col, width=80, minwidth=70)
            elif col == "–¶–µ–Ω–∞":
                self.products_tree.column(col, width=100, minwidth=80)
            elif col == "–°—Ç–∞—Ç—É—Å":
                self.products_tree.column(col, width=100, minwidth=80)
            elif col == "–û—Å—Ç–∞—Ç–æ–∫":
                self.products_tree.column(col, width=80, minwidth=70)
            else:
                self.products_tree.column(col, width=150, minwidth=100)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.products_tree.yview)
        h_scrollbar = ttk.Scrollbar(table_frame, orient="horizontal", command=self.products_tree.xview)
        self.products_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–≤
        self.products_tree.grid(row=0, column=0, sticky="nsew")
        v_scrollbar.grid(row=0, column=1, sticky="ns")
        h_scrollbar.grid(row=1, column=0, sticky="ew")
        
        table_frame.grid_rowconfigure(0, weight=1)
        table_frame.grid_columnconfigure(0, weight=1)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.products_tree.bind("<Double-1>", lambda e: self.edit_product())
        self.products_tree.bind("<<TreeviewSelect>>", self.on_product_select)
    
    def setup_status_bar(self):
        """–°—Ç–∞—Ç—É—Å –±–∞—Ä"""
        status_frame = ctk.CTkFrame(self.root)
        status_frame.pack(fill="x", padx=10, pady=5)
        
        self.status_label = ctk.CTkLabel(status_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label.pack(side="left", padx=10, pady=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = ctk.CTkProgressBar(status_frame)
        self.progress_bar.pack(side="right", padx=10, pady=5)
        self.progress_bar.set(0)
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use("clam")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è Treeview
        style.configure("Treeview", background="#FFFFFF", foreground="#000000", fieldbackground="#FFFFFF")
        style.configure("Treeview.Heading", background="#E0E0E0", foreground="#000000")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        style.map("Treeview",
                  background=[('selected', '#347083')])
    
    def setup_table_colors(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        self.products_tree.tag_configure("status_new", background="#E8F5E8", foreground="#2E7D32")      # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–æ–≤—ã—Ö
        self.products_tree.tag_configure("status_modified", background="#FFF3E0", foreground="#F57C00") # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö
        self.products_tree.tag_configure("status_deleted", background="#FFEBEE", foreground="#C62828")  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö
        self.products_tree.tag_configure("status_unchanged", background="#FFFFFF", foreground="#000000") # –û–±—ã—á–Ω—ã–π –¥–ª—è –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö
    
    def connect_api(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
        url = self.url_entry.get().strip()
        if not url:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞")
            return
        
        try:
            self.wc_manager = WooCommerceManager(url)
            self.connection_status.configure(text="–ü–æ–¥–∫–ª—é—á–µ–Ω–æ", text_color="green")
            self.test_btn.configure(state="normal")
            self.load_btn.configure(state="normal")
            self.add_btn.configure(state="normal")
            
            self.update_status("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API:\n{e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"""
        if not self.wc_manager:
            return
        
        def test_thread():
            self.update_status("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            self.progress_bar.start()
            
            try:
                if self.wc_manager.test_connection():
                    self.root.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —Ä–∞–±–æ—Ç–∞–µ—Ç!"))
                    self.root.after(0, lambda: self.update_status("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ"))
                else:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API"))
            finally:
                self.root.after(0, lambda: self.progress_bar.stop())
        
        threading.Thread(target=test_thread, daemon=True).start()
    
    def load_products(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∞–π—Ç–∞"""
        if not self.wc_manager:
            return
        
        def load_thread():
            self.root.after(0, lambda: self.update_status("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤..."))
            self.root.after(0, lambda: self.progress_bar.start())
            self.is_loading = True
            
            try:
                products_data = self.wc_manager.get_all_products()
                self.products = [Product.from_woocommerce_dict(data) for data in products_data]
                
                # –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç—ã
                self.categories = self.wc_manager.get_categories()
                self.attributes = self.wc_manager.get_attributes()
                
                self.root.after(0, self.update_products_table)
                self.root.after(0, lambda: self.update_status(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.products)} —Ç–æ–≤–∞—Ä–æ–≤"))
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                self.root.after(0, lambda: self.edit_btn.configure(state="normal"))
                self.root.after(0, lambda: self.delete_btn.configure(state="normal"))
                self.root.after(0, lambda: self.save_btn.configure(state="normal"))
                
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã:\n{e}"))
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            finally:
                self.is_loading = False
                self.root.after(0, lambda: self.progress_bar.stop())
        
        threading.Thread(target=load_thread, daemon=True).start()
    
    def update_products_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.products_tree.get_children():
            self.products_tree.delete(item)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        for product in self.products:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é)
            if product._is_deleted and not product.id:
                continue
                
            display_info = product.get_display_info()
            values = [display_info.get(col, "") for col in self.products_tree["columns"]]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
            change_status = product.get_change_status()
            tag_name = f"status_{change_status}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫ ID –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if change_status != "unchanged":
                status_indicators = {
                    "new": "[–ù–û–í–´–ô]",
                    "modified": "[–ò–ó–ú–ï–ù–ï–ù]", 
                    "deleted": "[–£–î–ê–õ–ï–ù]"
                }
                values[0] = f"{values[0]} {status_indicators.get(change_status, '')}"
            
            self.products_tree.insert("", "end", values=values, tags=(product.id, tag_name))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
        self.setup_table_colors()
    
    def on_product_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        selection = self.products_tree.selection()
        if selection:
            # –¢–æ–≤–∞—Ä –≤—ã–±—Ä–∞–Ω, –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å
            pass
    
    def on_search(self, event):
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        search_term = self.search_entry.get().lower()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.products_tree.get_children():
            self.products_tree.delete(item)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã
        for product in self.products:
            if (search_term in product.name.lower() or 
                search_term in product.sku.lower()):
                display_info = product.get_display_info()
                values = [display_info.get(col, "") for col in self.products_tree["columns"]]
                self.products_tree.insert("", "end", values=values, tags=(product.id,))
    
    def clear_search(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        self.search_entry.delete(0, "end")
        self.update_products_table()
    
    def add_product(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        from product_dialog import ProductDialog
        
        dialog = ProductDialog(self.root, categories=self.categories, attributes=self.attributes)
        if dialog.result:
            # –ü–æ–º–µ—á–∞–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –Ω–æ–≤—ã–π
            dialog.result.mark_as_new()
            self.products.append(dialog.result)
            self.update_products_table()
            self.update_status("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–∞–π—Ç.")
    
    def edit_product(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–µ–≥–æ–≤
        item = self.products_tree.item(selection[0])
        product_id = item['tags'][0] if item['tags'] else None
        
        if product_id:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ
            product = next((p for p in self.products if p.id == product_id), None)
            if product:
                from product_dialog import ProductDialog
                
                dialog = ProductDialog(self.root, product=product, categories=self.categories, attributes=self.attributes)
                if dialog.result:
                    # –ü–æ–º–µ—á–∞–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π
                    dialog.result.mark_as_modified()
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ
                    index = self.products.index(product)
                    self.products[index] = dialog.result
                    self.update_products_table()
                    self.update_status("–¢–æ–≤–∞—Ä –∏–∑–º–µ–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–∞–π—Ç.")
    
    def delete_product(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?"):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
        item = self.products_tree.item(selection[0])
        product_id = item['tags'][0] if item['tags'] else None
        
        if product_id:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π
            product = next((p for p in self.products if p.id == product_id), None)
            if product:
                product.mark_as_deleted()
            self.update_products_table()
            self.update_status("–¢–æ–≤–∞—Ä –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.")
    
    def save_changes(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å–∞–π—Ç"""
        if not self.wc_manager:
            messagebox.showerror("–û—à–∏–±–∫–∞", "API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        products_to_create = []
        products_to_update = []
        products_to_delete = []
        
        for product in self.products:
            if product.is_changed():
                status = product.get_change_status()
                if status == "new":
                    products_to_create.append(product)
                elif status == "modified":
                    products_to_update.append(product)
                elif status == "deleted":
                    products_to_delete.append(product)
        
        total_operations = len(products_to_create) + len(products_to_update) + len(products_to_delete)
        
        if total_operations == 0:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        confirm_message = f"""
–ë—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å: {len(products_to_create)} —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å: {len(products_to_update)} —Ç–æ–≤–∞—Ä–æ–≤  
‚Ä¢ –£–¥–∞–ª–∏—Ç—å: {len(products_to_delete)} —Ç–æ–≤–∞—Ä–æ–≤

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"""
        
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", confirm_message):
            return
        
        def save_thread():
            try:
                self.root.after(0, lambda: self.update_status("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."))
                self.root.after(0, lambda: self.progress_bar.start())
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π
                results = {
                    "created": [],
                    "updated": [],
                    "deleted": [],
                    "errors": []
                }
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                if products_to_create:
                    self.root.after(0, lambda: self.update_status(f"–°–æ–∑–¥–∞–Ω–∏–µ {len(products_to_create)} —Ç–æ–≤–∞—Ä–æ–≤..."))
                    
                    # –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤
                    if len(products_to_create) > 5:
                        create_data = [product.to_woocommerce_dict() for product in products_to_create]
                        batch_result = self.wc_manager.batch_create_products(create_data)
                        
                        for i, created_product in enumerate(batch_result["success"]):
                            products_to_create[i].id = created_product["id"]
                            products_to_create[i].reset_change_flags()
                            results["created"].append(created_product)
                        
                        results["errors"].extend(batch_result["errors"])
                    else:
                        # –ü–æ—à—Ç—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                        for product in products_to_create:
                            created_product = self.wc_manager.create_product(product.to_woocommerce_dict())
                            if created_product:
                                product.id = created_product["id"]
                                product.reset_change_flags()
                                results["created"].append(created_product)
                            else:
                                results["errors"].append({"product": product.name, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å"})
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
                if products_to_update:
                    self.root.after(0, lambda: self.update_status(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {len(products_to_update)} —Ç–æ–≤–∞—Ä–æ–≤..."))
                    
                    # –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤
                    if len(products_to_update) > 5:
                        update_data = []
                        for product in products_to_update:
                            product_dict = product.to_woocommerce_dict()
                            product_dict["id"] = product.id
                            update_data.append(product_dict)
                        
                        batch_result = self.wc_manager.batch_update_products(update_data)
                        
                        for i, updated_product in enumerate(batch_result["success"]):
                            products_to_update[i].reset_change_flags()
                            results["updated"].append(updated_product)
                        
                        results["errors"].extend(batch_result["errors"])
                    else:
                        # –ü–æ—à—Ç—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        for product in products_to_update:
                            updated_product = self.wc_manager.update_product(product.id, product.to_woocommerce_dict())
                            if updated_product:
                                product.reset_change_flags()
                                results["updated"].append(updated_product)
                            else:
                                results["errors"].append({"product": product.name, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å"})
                
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
                if products_to_delete:
                    self.root.after(0, lambda: self.update_status(f"–£–¥–∞–ª–µ–Ω–∏–µ {len(products_to_delete)} —Ç–æ–≤–∞—Ä–æ–≤..."))
                    
                    # –ü–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤
                    if len(products_to_delete) > 5:
                        delete_ids = [product.id for product in products_to_delete if product.id]
                        batch_result = self.wc_manager.batch_delete_products(delete_ids)
                        
                        results["deleted"].extend(batch_result["success"])
                        results["errors"].extend(batch_result["errors"])
                        
                        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                        self.products = [p for p in self.products if not p._is_deleted]
                    else:
                        # –ü–æ—à—Ç—É—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                        for product in products_to_delete:
                            if product.id and self.wc_manager.delete_product(product.id):
                                results["deleted"].append({"id": product.id, "name": product.name})
                            else:
                                results["errors"].append({"product": product.name, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å"})
                        
                        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                        self.products = [p for p in self.products if not p._is_deleted]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                self.root.after(0, self.update_products_table)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                success_count = len(results["created"]) + len(results["updated"]) + len(results["deleted"])
                error_count = len(results["errors"])
                
                if error_count == 0:
                    message = f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {success_count}"
                    self.root.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", message))
                else:
                    message = f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏.\n\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–û—à–∏–±–æ–∫: {error_count}"
                    self.root.after(0, lambda: messagebox.showwarning("–ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö", message))
                
                self.root.after(0, lambda: self.update_status("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))
                
            except Exception as e:
                error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}"
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", error_message))
                logger.error(error_message)
            finally:
                self.root.after(0, lambda: self.progress_bar.stop())
        
        threading.Thread(target=save_thread, daemon=True).start()
    
    def import_csv(self, csv_format='auto'):
        """–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        
        if filename:
            def import_thread():
                self.root.after(0, lambda: self.update_status("–ò–º–ø–æ—Ä—Ç –∏–∑ CSV..."))
                self.root.after(0, lambda: self.progress_bar.start())
                
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if csv_format == 'auto':
                        detected_format = self.csv_manager.detect_csv_format(filename)
                        format_message = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç: {detected_format}"
                        self.root.after(0, lambda: self.update_status(format_message))
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                    if csv_format == 'simple':
                        imported_products = self.csv_manager.import_simple_csv(filename)
                    elif csv_format == 'woocommerce':
                        imported_products = self.csv_manager.import_woocommerce_csv(filename)
                    else:
                        imported_products = self.csv_manager.import_products_from_csv(filename)
                    
                    self.products.extend(imported_products)
                    
                    self.root.after(0, self.update_products_table)
                    self.root.after(0, lambda: self.update_status(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(imported_products)} —Ç–æ–≤–∞—Ä–æ–≤"))
                    
                except Exception as e:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV:\n{e}"))
                finally:
                    self.root.after(0, lambda: self.progress_bar.stop())
            
            threading.Thread(target=import_thread, daemon=True).start()
    
    def export_csv(self, csv_format='simple'):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV"""
        if not self.products:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        format_suffix = "_woocommerce" if csv_format == 'woocommerce' else "_simple"
        filename = filedialog.asksaveasfilename(
            title=f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ {csv_format.upper()} CSV",
            defaultextension=f"{format_suffix}.csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        
        if filename:
            def export_thread():
                self.root.after(0, lambda: self.update_status("–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV..."))
                self.root.after(0, lambda: self.progress_bar.start())
                
                try:
                    if csv_format == 'woocommerce':
                        # –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ WooCommerce
                        try:
                            from woocommerce_csv_manager import WooCommerceCSVManager
                            wc_manager = WooCommerceCSVManager()
                            success = wc_manager.export_to_woocommerce_csv(self.products, filename)
                        except ImportError:
                            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "WooCommerce CSV –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"))
                            success = False
                    else:
                        # –ü—Ä–æ—Å—Ç–æ–π —ç–∫—Å–ø–æ—Ä—Ç
                        success = self.csv_manager.export_products_to_csv(self.products, filename)
                    
                    if success:
                        format_name = "WooCommerce" if csv_format == 'woocommerce' else "–ø—Ä–æ—Å—Ç–æ–π"
                        self.root.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", f"–≠–∫—Å–ø–æ—Ä—Ç –≤ {format_name} CSV –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"))
                        self.root.after(0, lambda: self.update_status(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ {format_name} CSV –∑–∞–≤–µ—Ä—à–µ–Ω"))
                    else:
                        self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"))
                
                except Exception as e:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV:\n{e}"))
                finally:
                    self.root.after(0, lambda: self.progress_bar.stop())
            
            threading.Thread(target=export_thread, daemon=True).start()
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
üõí WooCommerce Product Manager v3.0

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ 
–ª—é–±—ã—Ö WordPress + WooCommerce —Å–∞–π—Ç–æ–≤ —á–µ—Ä–µ–∑ REST API

üÜï –ù–æ–≤–æ–µ –≤ v3.0:
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö WooCommerce —Å–∞–π—Ç–æ–≤
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–∞–π—Ç–∞–º–∏
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π

–†–∞–Ω–µ–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å WooCommerce API
‚Ä¢ –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –º–µ—Ç–∞-–ø–æ–ª–µ–π
‚Ä¢ –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç WooCommerce CSV

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Python –∏ CustomTkinter
        """
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
    
    def show_setup_instructions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        instructions_text = """
üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ WooCommerce API

1. –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É WordPress
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ WooCommerce ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Üí REST API
3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á"
4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è:
   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: "Product Manager"
   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   ‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: "–ß—Ç–µ–Ω–∏–µ/–ó–∞–ø–∏—Å—å"
5. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á API"
6. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Consumer Key –∏ Consumer Secret

–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
1. –ù–∞–∂–º–∏—Ç–µ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
2. –í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
3. –í–≤–µ–¥–∏—Ç–µ Consumer Key –∏ Consumer Secret
4. –ù–∞–∂–º–∏—Ç–µ "üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
5. –ü—Ä–∏ —É—Å–ø–µ—Ö–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å

–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä–∞–º–∏.
        """
        messagebox.showinfo("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", instructions_text)
    
    def show_new_features(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ v3.0"""
        features_text = """
üÜï –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ WooCommerce Product Manager v3.0

üåê –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–°–¢–¨:
‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª—é–±–æ–º—É WooCommerce —Å–∞–π—Ç—É
‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–∞–π—Ç–∞–º–∏
‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π

‚öôÔ∏è –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:
‚úÖ –í—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏ API (v1, v2, v3)
‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤

üìÅ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø–ú–ò:
‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ñ–∞–π–ª
‚úÖ –ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

üí° –£–õ–£–ß–®–ï–ù–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê:
‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ñ–∏–ª–µ
‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–≤–æ–¥–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!
        """
        messagebox.showinfo("–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ v3.0", features_text)
    
    def export_profiles_menu(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
        filename = filedialog.asksaveasfilename(
            title="–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            if config_manager.export_profiles(filename):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü—Ä–æ—Ñ–∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{filename}")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏")
    
    def import_profiles_menu(self):
        """–ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
        filename = filedialog.askopenfilename(
            title="–ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            if config_manager.import_profiles(filename):
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ—Ñ–∏–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
                self.update_profile_menu()  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª–µ–π
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏")
    
    def update_status(self, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.configure(text=message)
        self.root.update_idletasks()
    
    def open_connection_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            dialog = ConnectionSettingsDialog(self.root)
            self.root.wait_window(dialog.dialog)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Ñ–∏–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if dialog.result:
                self.update_connection_info()
                self.update_profile_menu()
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API
                self.connect_to_current_profile()
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n{e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def update_connection_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
        if config_manager.current_profile and config_manager.current_profile.is_valid():
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            self.current_profile_label.configure(
                text=f"üìå {config_manager.current_profile.name}", 
                text_color="green"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ URL
            self.site_url_label.configure(
                text=config_manager.current_profile.site_url, 
                text_color="blue"
            )
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.test_btn.configure(state="normal")
            
        else:
            self.current_profile_label.configure(text="–ù–µ –≤—ã–±—Ä–∞–Ω", text_color="gray")
            self.site_url_label.configure(text="–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", text_color="gray")
            self.test_btn.configure(state="disabled")
            self.connection_status.configure(text="‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", text_color="red")
    
    def update_profile_menu(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        profile_names = config_manager.get_profile_names()
        
        if profile_names:
            self.profile_menu.configure(values=profile_names)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –º–µ–Ω—é
            if config_manager.current_profile:
                self.profile_menu.set(config_manager.current_profile.name)
            else:
                self.profile_menu.set("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å...")
        else:
            self.profile_menu.configure(values=["–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π"])
            self.profile_menu.set("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π")
    
    def switch_profile(self, profile_name: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
        if profile_name and profile_name != "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å..." and profile_name != "–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π":
            if config_manager.set_current_profile(profile_name):
                self.update_connection_info()
                self.connect_to_current_profile()
                self.update_status(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å '{profile_name}'")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å '{profile_name}'")
    
    def connect_to_current_profile(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º"""
        if not config_manager.is_configured():
            self.connection_status.configure(text="‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", text_color="red")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            config = config_manager.get_current_config()
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.wc_manager = WooCommerceManager()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            self.wc_manager._setup_api_with_config(config)
            
            self.connection_status.configure(text="‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ", text_color="green")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
            self.load_btn.configure(state="normal")
            self.add_btn.configure(state="normal")
            
            self.update_status(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {config['site_url']}")
            
        except Exception as e:
            self.connection_status.configure(text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", text_color="red")
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API:\n{e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.update_connection_info()
        self.update_profile_menu()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        if config_manager.is_configured():
            self.connect_to_current_profile()
        
        self.root.mainloop()

if __name__ == "__main__":
    app = ProductManagerGUI()
    app.run() 